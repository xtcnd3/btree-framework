btree-framework

Author: Andreas Steffens
Version: 0.08 (alpha)
License: LGPL v3.0

Contents

1. Where to start
2. How to build this framework under linux or windows
2.1. Linux
2.1.1. How to build the test bench using cmake
2.1.2. How to make the framework part of an exsting project which uses a makefile
2.2. Windows
2.2.1. How to build the test bench using cygwin and cmake
2.2.2. How to make the framework part of an exsting project which uses visual studio
2.3. build flags
2.4. What has to be includes are required
3. Feedback
3.1. What increases the chances that I will respond to your email
3.1.1. A proper subject, which tells the context of what I am going to find in your email's body.
3.1.2. An email body that gets to the point of what you want to say.
3.2. What decreases the chances that I will respond to your email
3.2.1. An empty or useless subject.
3.2.2. Email content that is confusing or off topic.
3.2.3. Content that has been covered by the documentation or is too obvious to warrant a reply.
3.2.4. Improper english.


1. Where to start

In order to download the documentation, you need to check out the btree framework test bench using the following command lines:

cd .../to/your/projects/location
git clone --recursive https://github.com/andreas-steffens/btree-framework-testbench

The folder ./btree-framework-testbench/doc holds two files containing the same documentation. One file is displaying the documentation as an Open Office Text file (.odt), while the other is a Portable Document Format file (.pdf). That documentation explains this b-tree framework in detail, but only a sub set of sections is required to be understood to get started. See below:

Quick Start Guide
Programmer Guide
	Class Hierarchy
		Specific Data Classes
			CBTreeArray
			CBTreeKeySort
			Associative Containers (CBTree[Multi]Map|Set)
	Template Parameters
		Data Type (_t_data)
		Key Type (_t_key)
		Address Type (_t_sizetype)
		Data Layer Properties (_t_datalayerproperties)
	Application Classes
		Application Specific Key Sort Classes
			comp ()
				Default comp () addendum
			extract_key ()
				extract_key () addendum


2. How to build this framework under linux or windows


2.1. Linux


2.1.1. How to build the test bench using cmake

For this framework to compile, a compiler capable to support the C++11 dialect is required.
This release was tested with: GCC (C++) 6.2.1 20160916 (Fedora 24 x86_64)

To build the b-tree test bench execute the following commands:

cd .../to/your/projects/location
git clone --recursive https://github.com/andreas-steffens/btree-framework-testbench
cd btree-framework-testbench/src/btreetest
make debug

List of make file rules:
all								- runs regression, valgrind_report, coverage_report, performance, release
debug							- builds regression test binary with debug flags
profile							- builds regression test binary with profile flags (resulting binary is supposed to be used with a profiler)
release							- builds regression test binary with release flags
coverage						- builds regression test binary with debug and coverage flags
regression						- runs regression tests using debug binary
performance						- runs performance tests using release binary (this is not ready yet)
coverage_report					- runs regression tests using coverage binary and creates result displayed as HTML
valgrind_report					- runs regression tests using valgrind with debug binary (warning: takes days or maybe weeks to run)
clean_all						- runs any clean commands
clean							- removes any build file (may those be intermediate or final)
clean_coverage					- removes any coverage or coverage report file (may those be intermediate or final)
clean_regression_tests			- cleans all regression tests regardless of their result
clean_failed_regression_tests	- cleans all regression tests that returned with an error code
clean_coverage_tests			- cleans all code coverage tests regardless of their result
clean_failed_coverage_tests		- cleans all code coverage tests that returned with an error code
clean_validation_tests			- cleans all validation tests regardless of their result
clean_failed_validation_tests	- cleans all validation tests that returned with an error code
clean_tests						- runs clean_regression_tests clean_coverage_tests clean_validation_tests
clean_failed_tests				- runs clean_failed_regression_tests clean_failed_coverage_tests clean_failed_validation_tests


2.1.2. How to make the framework part of an exsting project which uses a makefile

In order to build the btree framework without cmake using a makefile follow the step below:

1) Clone the btree framework from github

cd /relative/or/absolute/path/to/your/common/location/
git clone https://github.com/andreas-steffens/btree-framework
cd btree-framework-testbench/src/btreetest

2) Add the following files to your build

/relative/or/absolute/path/to/your/common/location/btree-framework/specific_data_classes/btreemap.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/specific_data_classes/btreearray.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/specific_data_classes/btreekeysort.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/specific_data_classes/btreemultiset.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/specific_data_classes/btreeset.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/specific_data_classes/btreemultimap.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/abstract_data_classes/btreeassociative.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/abstract_data_classes/btreeassociativebase.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/super_classes/btreeaux.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/io/data_layer/type/btreeioblock.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/io/data_layer/type/btreeiolinear.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/io/data_layer/target/btreeioram.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/io/data_layer/target/btreeiofile.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/io/data_layer/base/btreeio.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/io/properties/btreeramioprop.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/io/properties/btreefileioprop.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/io/properties/base/btreeioprop.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/common/btreecommon.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/iterators/btreeiter.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/base_class_stack/btreedefaults.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/base_class_stack/btreebasedefaults.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/base_class_stack/btreeif.cpp
/relative/or/absolute/path/to/your/common/location/btree-framework/base_class_stack/btreebaseif.cpp

3) Add the following include directories to your build

/relative/or/absolute/path/to/your/common/location/btree-framework
/relative/or/absolute/path/to/your/common/location/btree-framework/specific_data_classes
/relative/or/absolute/path/to/your/common/location/btree-framework/io/data_layer/target

4) Add the following optional build flags to your build

- _DEBUG
- BTREE_ITERATOR_REGISTRATION

Please find the description of these build flags in section "2.3. build flags".


2.2. Windows


2.2.1. How to build the test bench using cygwin and cmake

For this framework to compile, at least Visual Studio 2013 Express or a compiler that supports the C++11 dialect is required.
This release was tested with: Visual Studio Express 2013 Version: 12.0.40629.00 (update 5)

To build the b-tree regression test system cygwin and cmake are required. In terms of cmake, the windows version is needed and not the cygwin variant, since cygwin cmake doesn't support visual studio project generators. In order to make sure cygwin doesn't get confused between the two cmake versions, it is recommended to uninstall cygwin cmake and then to install windows cmake.

To build the b-tree test bench execute the following commands under cygwin:

cd .../to/your/projects/location
git clone --recursive https://github.com/andreas-steffens/btree-framework-testbench
cd btree-framework-testbench/src/btreetest

Here you can find a number of batch files called msvce201x.x86(&#95;64).bat. These batch files can be executed via command line or the windows explorer. Each of those batch files creates a directory named "cmake" and generates all cmake files as well as the respective visual studio express solution files, set up for the selected platform and visual studio express version, in there. Then it tries to open whatever visual studio express application can be found under the registry key HKEY&#95;CLASSES&#95;ROOT\Applications\WDExpress.exe\shell\open\command. Please see below what versions of visual studio express and target platforms are currently supported:

msvce2013.x86.bat    - Visual Studio Express 2013 for platform Win32
msvce2013.x86_64.bat - Visual Studio Express 2013 for platform x64
msvce2015.x86.bat    - Visual Studio Express 2015 for platform Win32
msvce2015.x86_64.bat - Visual Studio Express 2015 for platform x64

If the project needs re-opening at a later point, simply use the same batch file again. In the event that you accidentally select the wrong batch file, cmake will refuse to create new project files and aborts with an error message. As a result your existing project files remain unharmed.
In case you want build the project say for a different platform, then you'll need to close the visual studio instance that has the btree-framework test bench project open. After that, you need to delete or rename the afore mentioned cmake directory and execute a different batch file that generates the project files for the desired platform. However, any modifications that have been made to the project will be lost!


2.2.2. How to make the framework part of an exsting project which uses visual studio

For this framework to compile, at least Visual Studio 2013 Express or a compiler that supports the C++11 dialect is required.
This release was tested with: Visual Studio Express 2013 Version: 12.0.40629.00 (update 5)

To build the b-tree regression test system:

1. Create a new sub-project in your solution

2. Copy files from this release to your project location

3. The project needs to made aware of any source file provided
Add any source file from these location to your project
/relative/or/absolute/path/to/your/common/location/btree-framework/specific_data_classes/*
/relative/or/absolute/path/to/your/common/location/btree-framework/super_classes/*
/relative/or/absolute/path/to/your/common/location/btree-framework/io/data_layer/type/*
/relative/or/absolute/path/to/your/common/location/btree-framework/io/data_layer/target/*
/relative/or/absolute/path/to/your/common/location/btree-framework/io/data_layer/base/*
/relative/or/absolute/path/to/your/common/location/btree-framework/io/properties/*
/relative/or/absolute/path/to/your/common/location/btree-framework/io/properties/base/*
/relative/or/absolute/path/to/your/common/location/btree-framework/common/*
/relative/or/absolute/path/to/your/common/location/btree-framework/iterators/*
/relative/or/absolute/path/to/your/common/location/btree-framework/base_class_stack/*

4. The project needs to be aware of the following include locations:

/relative/or/absolute/path/to/your/project/location/btree-framework
/relative/or/absolute/path/to/your/project/location/btree-framework/specific_data_classes
/relative/or/absolute/path/to/your/project/location/btree-framework/io/data_layer/target

5. make other sub-projects within the solution dependent on the btree-framework sub-project as required

6. add the build flag "BTREE_ITERATOR_REGISTRATION" to the any build, if required (see below)


2.3. build flags

BTREE_ITERATOR_REGISTRATION:

If your code makes sure, that any b-tree framework iterator instance is destroyed before its respective associated container instance is destroyed, then the build flag BTREE_ITERATOR_REGISTRATION can be omitted, otherwise you would be facing access violations at run time. If your code doesn't make sure, iterators are destroyed before their associated container or you are in doubt, then enable the build flag BTREE_ITERATOR_REGISTRATION. Disabling this flag results in slightly faster code.

_DEBUG:

If the code is compiled to generate a debug binary, then this flag ought to enabled. It switches additional code for higher level debug functionality as well as performance counter code on. Furthermore, additional asserts are enabled to sanity check input parameters on lower level methods. In short: It enables code not required by a release build.


2.4. What has to be includes are required

If an STL compatible container class is required for the project, then see the table below:

include file		btree framework container		STL container

btreemultimap.h		CBTreeMultiMap					multimap
btreemap.h			CBTreeMap						map
btreemultiset.h		CBTreeMultiSet					multiset
btreeset.h			CBTreeSet						set

Depending on what other container type is required, at least one of the following files needs to be included:
btreekeysort.h	- includes ordered associative container: CBTreeKeySort
btreearray.h	- includes array type: CBTreeArray

Any of the above container types needs to know what data layer type is going to be used with it. This is set via the container's respective template parameter
Depending on what data layer will be in use, at least one of the following files needs to included:

include file		data layer type		property type				description

btreeioram.h		CBTreeFileIO		CBTreeIOpropertiesFile		contains everything required for the RAM data layer to work
btreeiofile.h		CBTreeRAMIO			CBTreeIOpropertiesRAM		contains everything required for the file data layer to work

Note: The above files also include their respective data layer property classes, so that additional includes are not needed.


3. Feedback

If you want to see updates or release on the btree-framework project, then follow this link:
https://www.facebook.com/btreeframework

If you want to contact me about this project, the email address below is what you want to use. Before you do so, read and understand this entire section, otherwise you might be wasting your time.

email: btreeframework@gmail.com


3.1. What increases the chances that I will respond to your email


3.1.1. A proper subject, which tells the context of what I am going to find in your email's body.

The subject ought to tell me briefly what the email is about. For instance:
"BUG: CBTree_classname::method_name - undefined behaviour in corner case"

The keyword at the beginning as well as the following text allow me to quickly assess what I am dealing with.
Also, the keyword allows to have filter rules in place. The subject currently is being filtered for the following keywords:

BUG: anything code related that is not behaving as documented
CODE: anything code related that ought to be implemented a different way
TEST: anything related to existing or missing regression tests or code coverage
DOC: anything document related, such as: Is content missing? Is something not explained well enough?
COMMENT: anything code related in terms of commenting, such as: an existing comment is misleading or not clear enough (you don't need to tell me about code that has not been commented yet)
QUESTION: any questing in terms of this project, which has not been answered anywhere else
ENHANCEMENT: anything related to this project that is an enhancement for everyone, such as: release procedures, file formats, folder structure etc.
OTHER: anything related to this project that has not been covered by any of the above keywords

If none of the keywords or an unknown keyword has been used, then your email is not lost, but won't be addressed for a very long time. Potentially for a period of time long enough, that the content becomes irrelevant. 

Neither the subject nor the email's body need to tell me that you are talking about the b-tree framework. If you send an email to the address above, then I am assuming that already.


3.1.2. An email body that gets to the point of what you want to say.

The rule of thumb to that end is: The more afford you have made on your side, the more I am inclined to believe you are actually interested in what you are doing. I mean: if you don't care, why should I? By afford, I don't mean that you have to write a tone of text. What I am asking for is a clear train of though, since it won't be you who has to understand your email, that will be me. Explain why you think something needs to be changed, enhanced, fixed, tested or is broken.
In terms of bugs, make sure it isn't a misinterpretation of the documentation or that you are looking at the wrong API function, because between different container types they can look very similar. Double check your findings and document them very well. I am asking you to do that, since your problem won't be the only one I will be dealing with. The more work you put into your request, the quicker I can resolve it and move on to the next request. In the long run it helps everyone.
Also, criticism is good, but everyone can criticise. At the very least, suggest how to do things better.


3.2. What decreases the chances that I will respond to your email


3.2.1. An empty or useless subject.

An empty subject or useless a subject like this: "OTHER: problem", just shows me that not much afford went into writing this email. How I feel about that has been explained above. A useless subject also includes misleading ones. If I see the keyword "BUG" in the subject, then I am expecting to see email content that is talking about code that is not behaving as documented. If that expectation is not met, then don't assume I will be putting much more afford into reading or understanding your message.


3.2.2. Email content that is confusing or off topic.

If I find your email confusing, misleading or off topic, then chances are that you are trying to talk about two or more subjects at once. If you want to talk about two different subjects, then write two emails. It also enables me to answer more to the point for each of your messages.
Also, in terms of off topic: Insults won't get you anywhere.


3.2.3. Content that has been covered by the documentation or is too obvious to warrant a reply.

If something has been covered by the documentation, then you will probably get a very short answer where to find it or none at all, depending on my work load. If I see a question like: "Hey, what's a b-tree?", you can be rest assured that I will remain silent.


3.2.4. Improper english.

First of all, I am not an english native speaker and at this point you probably have already spotted a number of grammar and spelling mistakes. Those are not what I mean by "Improper english". What I mean is content like this: "Yo, c my hax yo!"
It doesn't inspire any confidence and will just make me move on to the next email.
Also, what I don't like is when someone writes the letter "u" instead of the word "you" or similar shortcuts. This allows for room to doubt your motivation and once I have that room it is likely that I will divert my interest to something else, like the next email. Just don't allow me to have that room...
Shortcuts or abbreviations, which are within context, such as: "Ctrl+C", are fine though.
